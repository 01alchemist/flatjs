/* -*- mode: javascript -*- */

load("../libflatjs.js");
var ab = new ArrayBuffer(1024);
FlatJS.init(ab, true);

// Basic ideas

assertEq(int8.SIZE, 1);
assertEq(int16.SIZE, 2);
assertEq(int32.SIZE, 4);

assertEq(uint8.SIZE, 1);
assertEq(uint16.SIZE, 2);
assertEq(uint32.SIZE, 4);

assertEq(float32.SIZE, 4);
assertEq(float64.SIZE, 8);

// Basic classes

var glob = 0;

@flatjs class Point {
    x:int32
    y:int32

    @method init(SELF) {
	SELF.x = SELF.y = 0;	// Shorthand syntax
	SELF.y += 5;		// Shorthand syntax
    }

    @method deep6(SELF) {
	SELF.set_x(-SELF.x);
	SELF.set_y(-SELF.y);
	SELF.deep7(86);
    }

    @method deep7(SELF, k) {
	glob = k;
    }
} @end

assertEq(Point.NAME, "Point");
assertEq(Point.SIZE, 12);	         // White-box, it could be larger
assertEq(Point.ALIGN, 4);	         // White-box, it could be larger

var p = @new Point;
Point.set_x(p, 10);
Point.set_y(p, 20);
assertEq(Point.x(p), 10);
assertEq(Point.y(p), 20);

assertEq(FlatJS.identify(p), Point);
assertEq(Point.CLSID, _mem_int32[p>>2]); // White-box, layout

assertEq(Point.ref_x(p) + int32.SIZE, Point.ref_y(p)); // Gray-box, layout

Point.deep6(p);
assertEq(glob, 86);

// Sundry syntax corner cases

@flatjs class EmptyClass {
} @end

@flatjs class MethodOnlyClass {
    @method oneLiner(SELF) { return 1; }
    @method anotherOneLiner(SELF) { return 2; }
} @end

// Basic inheritance

@flatjs class Point3D extends Point {
    z:int32

    @method init(SELF, x, y, z) {
	SELF.set_x(x);
	SELF.set_y(y);
	SELF.set_z(z);
	return SELF;
    }

    @method deep6(SELF) {	// Override
	SELF.z = -SELF.z;	// Alternate syntax
    }
} @end

var q = Point3D.init(@new Point3D, 5, 7, 8);
assertEq(Point.x(q), 5);
assertEq(Point.y(q), 7);
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), 8);

// Virtual calls

Point3D.deep6(q);		// Invoke Point3D.deep6
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), -8);

Point.deep6(q);			// Virtual, so invoke Point3D.deep6
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), 8);

assertEq(FlatJS.identify(q), Point3D);
assertEq(Point3D.BASE, Point);

// Structures

@flatjs struct Pair {
    x:float64;
    y:int32;

    @set(SELF, v) {
	SELF.set_x(v.x);
	SELF.set_y(v.y);
    }
    @get(SELF) {
	return {x:SELF.x, y:SELF.y};
    }
} @end

assertEq(Pair.SIZE, 16);
assertEq(Pair.ALIGN, 8);	// White-box, it could be larger

// Structure fields within classes

@flatjs class PairBox {
    pad1:float32;
    pad2:float64;
    p:Pair;
    pad3:int32;
} @end

var pr = @new PairBox;
PairBox.set_p_x(pr, 10);
PairBox.set_p_y(pr, 20);

PairBox.set_pad1(pr, 1);
PairBox.set_pad2(pr, 2);
PairBox.set_pad3(pr, 3);

assertEq(PairBox.ref_pad1(pr), pr+4); // White-box, layout

var ppr = PairBox.ref_p(pr);
assertEq(Pair.ref_x(ppr) - ppr, 0); // Well-defined
assertEq(Pair.ref_y(ppr) - ppr, 8); // White-box, it could be larger though shouldn't

assertEq(PairBox.p_x(pr), 10);
assertEq(PairBox.p_y(pr), 20);

assertEq(PairBox.pad1(pr), 1);
assertEq(PairBox.pad2(pr), 2);
assertEq(PairBox.pad3(pr), 3);

var ia = @new array(int32, 7);
for ( var i=0 ; i < 7 ; i++ )
    int32.array_set(ia, i, -i);

for ( var i=0 ; i < 7 ; i++ )
    assertEq(int32.array_get(ia, i), -i|0);

var pa = @new array(Pair, 4);
for ( var i=0 ; i < 4 ; i++ ) {
    Pair.array_set_x(pa, i, /* value */ i);
    Pair.array_set_y(pa, i, /* value */ -i);
}

for ( var i=0 ; i < 4 ; i++ ) {
    assertEq(Pair.array_get_x(pa, i), i);
    assertEq(Pair.array_get_y(pa, i), -i|0);
}

for ( var i=0 ; i < 4 ; i++ )
    var v = Pair.array_set(pa, i, {x:i+5, y:i-5});

for ( var i=0 ; i < 4 ; i++ ) {
    var v = Pair.array_get(pa, i);
    assertEq(v.x, i+5);
    assertEq(v.y, i-5);
}

print("Done");
