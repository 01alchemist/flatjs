/* -*- mode: javascript -*- */

load("../libflatjs.js");
var ab = new ArrayBuffer(1024);
FlatJS.init(ab, true);

// Basic ideas

assertEq(int8.SIZE, 1);
assertEq(int16.SIZE, 2);
assertEq(int32.SIZE, 4);

assertEq(uint8.SIZE, 1);
assertEq(uint16.SIZE, 2);
assertEq(uint32.SIZE, 4);

assertEq(float32.SIZE, 4);
assertEq(float64.SIZE, 8);

// Basic classes

var glob = 0;

@flatjs class Point {
    x:int32
    y:int32

    @method init(SELF) {
	SELF.x = SELF.y = 0;	// Shorthand syntax
	SELF.y += 5;		// Shorthand syntax
    }

    @virtual deep6(SELF) {
	SELF.x.set(-SELF.x);
	SELF.y.set(-SELF.y);
	SELF.deep7(86);
    }

    @method deep7(SELF, k) {
	glob = k;
    }
} @end

assertEq(typeof Point, "function");
assertEq((new Point) instanceof Point, true);

assertEq(Point.NAME, "Point");
assertEq(Point.SIZE, 12);	         // White-box, it could be larger
assertEq(Point.ALIGN, 4);	         // White-box, it could be larger
assertEq(typeof Point.CLSID, "number");
assertEq(Point.BASE, null);

var p = @new Point;
Point.x.set(p, 10);
Point.y.set(p, 20);
assertEq(Point.x(p), 10);
assertEq(Point.y(p), 20);

var po = new Point(p);
assertEq(po.pointer, p);

assertEq(FlatJS.identify(p), Point);
assertEq(Point.CLSID, _mem_int32[p>>2]); // White-box, layout

assertEq(Point.x.ref(p) + int32.SIZE, Point.y.ref(p)); // Gray-box, layout

Point.deep6(p);
assertEq(glob, 86);

// Sundry syntax corner cases

@flatjs class EmptyClass {
} @end

@flatjs class MethodOnlyClass {
    @method oneLiner(SELF) { return 1; }
    @method anotherOneLiner(SELF) { return 2; }
} @end

// Basic inheritance

@flatjs class Point3D extends Point {
    z:int32

    @method init(SELF, x, y, z) {
	SELF.x.set(x);
	SELF.y.set(y);
	SELF.z.set(z);
	return SELF;
    }

    @virtual deep6(SELF) {	// Override
	SELF.z = -SELF.z;	// Alternate syntax
    }
} @end

assertEq(Point3D.NAME, "Point3D");

assertEq(typeof Point3D, "function");
assertEq((new Point3D) instanceof Point3D, true);
assertEq((new Point3D) instanceof Point, true);

var q = Point3D.init(@new Point3D, 5, 7, 8);
assertEq(Point.x(q), 5);
assertEq(Point.y(q), 7);
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), 8);

var qo = new Point3D(q);
assertEq(qo.pointer, q);

// Virtual calls

Point3D.deep6(q);		// Invoke Point3D.deep6
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), -8);

Point.deep6(q);			// Virtual, so invoke Point3D.deep6
assertEq(Point3D.x(q), 5);
assertEq(Point3D.y(q), 7);
assertEq(Point3D.z(q), 8);

assertEq(FlatJS.identify(q), Point3D);
assertEq(Point3D.BASE, Point);

// Structures

@flatjs struct Pair {
    x:float64;
    y:int32;

    @set(SELF, v) {
	SELF.x.set(v.x);
	SELF.y.set(v.y);
    }
    @get(SELF) {
	return {x:SELF.x, y:SELF.y};
    }
} @end

assertEq(Pair.SIZE, 16);
assertEq(Pair.ALIGN, 8);	// White-box, it could be larger
assertEq(Pair.NAME, "Pair");

assertEq(typeof Pair, "function");
assertEq((new Pair) instanceof Pair, true);

// Structure fields within classes

@flatjs class PairBox {
    pad1:float32;
    pad2:float64;
    p:Pair;
    pad3:int32;
} @end

var pr = @new PairBox;
PairBox.p.x.set(pr, 10);
PairBox.p.y.set(pr, 20);

PairBox.pad1.set(pr, 1);
PairBox.pad2.set(pr, 2);
PairBox.pad3.set(pr, 3);

assertEq(PairBox.pad1.ref(pr), pr+4); // White-box, layout

var ppr = PairBox.p.ref(pr);
assertEq(Pair.x.ref(ppr) - ppr, 0); // Well-defined
assertEq(Pair.y.ref(ppr) - ppr, 8); // White-box, it could be larger though shouldn't

assertEq(PairBox.p.x(pr), 10);
assertEq(PairBox.p.y(pr), 20);

assertEq(PairBox.pad1(pr), 1);
assertEq(PairBox.pad2(pr), 2);
assertEq(PairBox.pad3(pr), 3);

var ia = @new int32.Array(7);
for ( var i=0 ; i < 7 ; i++ )
    int32.Array.setAt(ia, i, -i);

for ( var i=0 ; i < 7 ; i++ )
    assertEq(int32.Array.at(ia, i), -i|0);

// This also tests comments within parameter lists
var pa = @new Pair.Array(4);
for ( var i=0 ; i < 4 ; i++ ) {
    Pair.Array.x.setAt(pa, i, /* value */ i);
    Pair.Array.y.setAt(pa, i, /* value */ -i);
}

for ( var i=0 ; i < 4 ; i++ ) {
    assertEq(Pair.Array.x.at(pa, i), i);
    assertEq(Pair.Array.y.at(pa, i), -i|0);
}

for ( var i=0 ; i < 4 ; i++ )
    var v = Pair.Array.setAt(pa, i, {x:i+5, y:i-5});

for ( var i=0 ; i < 4 ; i++ ) {
    var v = Pair.Array.at(pa, i);
    assertEq(v.x, i+5);
    assertEq(v.y, i-5);
}

// This tests strings within parameter lists.  Conversion should let
// the program run.
Pair.Array.x.setAt(pa, i, "37\"42");

@flatjs class WithArray {
    xs : int32.Array
} @end

// Default getter and setter

@flatjs struct Pair2 {
    x:float64;
    y:int32;
} @end

@flatjs class Pair2Box {
    p: Pair2;
} @end

var p2 = @new Pair2Box;
Pair2Box.p.set(p2, { x:-1.5, y:37} );
assertEq(Pair2Box.p(p2).x, -1.5);
assertEq(Pair2Box.p(p2).y, 37);

print("Done");
